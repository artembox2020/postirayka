<?php

namespace frontend\models;

use Yii;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveRecord;
use yii2tech\ar\softdelete\SoftDeleteBehavior;

/**
 * Class TechnicalWork
 * @package frontend\models
 *
 * @property int $id
 * @property int $address_id
 * @property int $machine_id
 * @property int $inventory_number
 * @property int $technical_work_data
 * @property int $created_at
 * @property int $updated_at
 * @property boolean $is_deleted
 * @property int $deleted_at
 */
class TechnicalWork extends ActiveRecord
{
    /** @var array Type technical works */
    public $type_work = [
        'engine',
        'water pump',
        'module',
        'ten',
        'branch pipes',
        'shock absorber',
        'wiring',
        'lock',
        'hatch',
        'front panel',
        'crosspiece / bearing',
        'sensors'
        ];

    /**
     * @return string
     */
    public static function tableName()
    {
        return 'technical_work';
    }

    /**
     * @return array
     */
    public function behaviors()
    {
        return [
            'softDeleteBehavior' => [
                'class' => SoftDeleteBehavior::className(),
                'softDeleteAttributeValues' => [
                    'is_deleted' => true
                ],
            ],
            [
                'class' => TimestampBehavior::className()
            ]
        ];
    }

    /**
     * @return array
     */
    public function rules()
    {
        return parent::rules(); // TODO: Change the autogenerated stub
    }

    /**
     * @return array
     */
    public function attributeLabels()
    {
        return [
            'engine' => Yii::t('wash_machine/technical_work', 'engine'),
            ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public static function find()
    {
        return parent::find()
            ->where(['technical_work.is_deleted' => false]);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getAddress()
    {
        return $this->hasOne(AddressBalanceHolder::className(), ['id' => 'address_id']);
    }

    /**
     * Gets current state of Technical works
     *
     * @return string|null
     */
    public function getState()
    {
        if (array_key_exists($this->technical_work_data, $this->type_work)) {

            return Yii::t('wash_machine/technical_work', $this->type_work[$this->technical_work_data]);
        }
    }

    /**
     * @return array
     */
    public function getTechnicalWork()
    {
        $array = [];
        foreach ($this->type_work as $key => $value) {
            $array[] =  Yii::t('wash_machine/technical_work', $value);
        }

        return $array;
    }

    /**
     * @param WmMashine $model
     * @param $array
     * @throws \Throwable
     */
    public function setWork(WmMashine $model, $array)
    {
        foreach ($array as $key => $value) {
            $technical = new TechnicalWork();
            $technical->address_id = $model->address_id;
            $technical->machine_id = $model->id;
            $technical->inventory_number = $model->inventory_number;
            $technical->technical_work_data = $value;
            $technical->is_deleted = false;
            $technical->insert();
        }
    }
}
